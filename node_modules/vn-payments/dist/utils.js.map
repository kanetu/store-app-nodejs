{"version":3,"sources":["../src/utils.js"],"names":["toUpperCase","pack","hashHmac","to2DigitNumber","vnPayDateFormat","createMd5Hash","urlRegExp","s","Error","data","encoding","Buffer","from","algorithm","secret","hmac","createHmac","update","digest","number","isNaN","substr","date","constructor","name","result","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","createHash"],"mappings":";;;;;;QAiBgBA,W,GAAAA,W;QAsBAC,I,GAAAA,I;QAYAC,Q,GAAAA,Q;QAYAC,c,GAAAA,c;QAiBAC,e,GAAAA,e;QAsBAC,a,GAAAA,a;;AAjGhB;;;;;;AAEA,MAAMC,YAAY,eAAlB,C,CAPA;;;AAGA;;QAMSA,S,GAAAA,S;;AAET;;;;;;;AAMO,SAASN,WAAT,CAAqBO,IAAI,EAAzB,EAA6B;AACnC,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACA;;AAED,SAAOD,EAAEP,WAAF,EAAP;AACA;;AAED;;;;;;;;;;;;;;AAcO,SAASC,IAAT,CAAcQ,IAAd,EAAoBC,WAAW,KAA/B,EAAsC;AAC5C,SAAOC,OAAOC,IAAP,CAAYH,IAAZ,EAAkBC,QAAlB,CAAP;AACA;;AAED;;;;;;;;AAQO,SAASR,QAAT,CAAkBW,SAAlB,EAA6BJ,IAA7B,EAAmCK,MAAnC,EAA2C;AACjD,QAAMC,OAAO,iBAAOC,UAAP,CAAkBH,SAAlB,EAA6BC,MAA7B,CAAb;AACAC,OAAKE,MAAL,CAAYR,IAAZ;;AAEA,SAAOM,KAAKG,MAAL,CAAY,KAAZ,CAAP;AACA;;AAED;;;;;AAKO,SAASf,cAAT,CAAwBgB,MAAxB,EAAgC;AACtC,MAAIC,MAAMD,MAAN,CAAJ,EAAmB;AAClB,UAAM,IAAIX,KAAJ,CAAU,uCAAV,CAAN;AACA;AACD,MAAI,CAACW,MAAL,EAAa;AACZ,WAAO,IAAP;AACA;;AAED,SAAQ,IAAGA,MAAO,EAAX,CAAaE,MAAb,CAAoB,CAAC,CAArB,EAAwB,CAAxB,CAAP;AACA;;AAED;;;;;;AAMO,SAASjB,eAAT,CAAyBkB,IAAzB,EAA+B;AACrC,MAAIA,KAAKC,WAAL,CAAiBC,IAAjB,KAA0B,MAA9B,EAAsC;AACrC,UAAM,IAAIhB,KAAJ,CAAU,sCAAV,CAAN;AACA;;AAED,MAAIiB,SAAS,EAAb;AACAA,YAAUH,KAAKI,WAAL,GAAmBC,QAAnB,EAAV;AACAF,YAAUtB,eAAemB,KAAKM,QAAL,KAAkB,CAAjC,CAAV;AACAH,YAAUtB,eAAemB,KAAKO,OAAL,EAAf,CAAV;AACAJ,YAAUtB,eAAemB,KAAKQ,QAAL,EAAf,CAAV;AACAL,YAAUtB,eAAemB,KAAKS,UAAL,EAAf,CAAV;AACAN,YAAUtB,eAAemB,KAAKU,UAAL,EAAf,CAAV;;AAEA,SAAOP,MAAP;AACA;;AAED;;;;;;AAMO,SAASpB,aAAT,CAAuBI,IAAvB,EAA6B;AACnC,SAAO,iBACLwB,UADK,CACM,KADN,EAELhB,MAFK,CAEER,IAFF,EAGLS,MAHK,CAGE,KAHF,CAAP;AAIA","file":"utils.js","sourcesContent":["/* Â© 2018 NauStud.io\n * @author Eric Tran\n */\n/** @module utils */\n\nimport crypto from 'crypto';\n\nconst urlRegExp = /https?:\\/\\/.*/;\n\nexport { urlRegExp };\n\n/**\n * Global function to convert String to upper case, with type checking\n *\n * @param {string} s\n * @return {string} all upper case string\n */\nexport function toUpperCase(s = '') {\n\tif (typeof s !== 'string') {\n\t\tthrow new Error('toUpperCase:param must be string');\n\t}\n\n\treturn s.toUpperCase();\n}\n\n/**\n * Equivalent to PHP's `pack` function, using Node native Buffer\n * <br>\n * Note: PHP\n * <br>\n * <pre>    <code>pack('H*', data)</code></pre>\n * is equivalent to Node:\n * <br>\n * <pre>    <code>Buffer.from(data, 'hex')</code></pre>\n *\n * @param {*} data\n * @param {*} encoding\n * @return {Buffer} Buffer of data encoded with `encoding` method\n */\nexport function pack(data, encoding = 'hex') {\n\treturn Buffer.from(data, encoding);\n}\n\n/**\n * Equivalent to PHP's `hash_hmac` function.\n *\n * @param  {string} algorithm  hashing algorithm\n * @param  {*}      data       data string to be hashed\n * @param  {Buffer} secret     Secret key used to hash data, generated with `pack` method\n * @return {string}            digested hash\n */\nexport function hashHmac(algorithm, data, secret) {\n\tconst hmac = crypto.createHmac(algorithm, secret);\n\thmac.update(data);\n\n\treturn hmac.digest('hex');\n}\n\n/**\n * Convenient function to convert number to 2 digit number string\n * @param {*} number\n * @return {string} formatted number\n */\nexport function to2DigitNumber(number) {\n\tif (isNaN(number)) {\n\t\tthrow new Error('to2DigitNumber:param must be a number');\n\t}\n\tif (!number) {\n\t\treturn '00';\n\t}\n\n\treturn `0${number}`.substr(-2, 2);\n}\n\n/**\n * Convenient function to convert date to format yyyyMMddHHmmss\n *\n * @param {Date} date Date object that need to be formatted\n * @return {string} date string formatted in yyyyMMddHHmmss\n */\nexport function vnPayDateFormat(date) {\n\tif (date.constructor.name !== 'Date') {\n\t\tthrow new Error('vnPayDateFormat:param must be a date');\n\t}\n\n\tlet result = '';\n\tresult += date.getFullYear().toString();\n\tresult += to2DigitNumber(date.getMonth() + 1);\n\tresult += to2DigitNumber(date.getDate());\n\tresult += to2DigitNumber(date.getHours());\n\tresult += to2DigitNumber(date.getMinutes());\n\tresult += to2DigitNumber(date.getSeconds());\n\n\treturn result;\n}\n\n/**\n * Convenient function to create md5 hash from string.\n *\n * @param {*} data\n * @return {string} md5 hash\n */\nexport function createMd5Hash(data) {\n\treturn crypto\n\t\t.createHash('md5')\n\t\t.update(data)\n\t\t.digest('hex');\n}\n"]}